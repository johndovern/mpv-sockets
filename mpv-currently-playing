#!/bin/bash
# mpv-get-property wrapper that gets full path of currently playing song
# If there are multiple instances of mpv playing at the same time,
# prints both
#
# Can provide the --socket flag to instead print the socket of the
# current mpv instance
#
# Do mpv-currently-playing 2>/dev/null to ignore errors from mpv
# instances which are streaming media instead of playing a local path

declare PRINT_SOCKET=''
while [[ -n "$1" ]]; do
	case "$1" in
	--socket)
		PRINT_SOCKET='1'
		;;
	*)
		printf 'Unknown option passed: %s\n' "$1" >&2
		exit 1
		;;
	esac
	shift
done
readonly PRINT_SOCKET

# change directory to root, so when we try to compute the absolute path,
# it doesn't fail since the playing file is the current directory
cd /

declare -a result=()
for socket in $(mpv-active-sockets); do

	# ignore items that aren't playing
	IS_PAUSED="$(mpv-get-property "$socket" 'pause')"
	[[ "$IS_PAUSED" == "true" ]] && continue

	if [[ -n "$PRINT_SOCKET" ]]; then # if user asked for socket, just print the socket
		result+=("$socket")
	else # else, try to get the full song path
		if SONG_PATH="$(mpv-get-property "$socket" 'path' 2>/dev/null)"; then
			# if the path doesnt correspond to its absolute path, or this doesnt exist, try prepending the working directory
			[[ -n "$SONG_PATH" && -e "$SONG_PATH" ]] || {
				SONG_PATH="$(mpv-get-property "$socket" 'working-directory')/${SONG_PATH}"
			}
			if [[ -e "$SONG_PATH" ]]; then
				result+=("$SONG_PATH")
			else
				echo "Error: ${SONG_PATH} doesn't exist" >&2
			fi
		fi
	fi
done

# switch on length of array (number of paths found)
case "${#result[@]}" in
0)
	exit 1
	;;
*)
	(
		IFS=$'\n'
		echo "${result[*]}"
	)
	;;
esac

#!/usr/bin/env bash
# mpv-get-property wrapper that gets full path of currently playing song
# If there are multiple instances of mpv playing at the same time,
# prints both
#
# Can provide the --socket flag to instead print the socket of the
# current mpv instance
#
# Pass the --all flag to print the path for all items, regardless
# of whether or not they're playing currently

declare -a RESULT=()
cd / || exit 1

get_opts() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -a|--all)
        ALLOW_PAUSED=1
        ;;
      -M|--media-title)
        MEDIA_TITLE=1
        ;;
      -m|--music)
        OPTION="--music --invert"
        ;;
      -q|--quiet)
        QUIET=1
        ;;
      -s|--socket)
        PRINT_SOCKET=1
        ;;
      -u|--umpv)
        OPTION="--umpv --invert"
        ;;
      -U|--unique)
        OPTION="--unique"
        ;;
      *)
        printf 'Unknown option passed: %s\n' "$1" >&2
        return 1
        ;;
    esac
    shift
  done
  readonly PRINT_SOCKET ALLOW_PAUSED
}

get_playing() {
  for SOCKET in $(mpv-active-sockets $OPTION); do
    [[ "$ALLOW_PAUSED" -ne 1 ]] && {
      [[ "$(mpv-get-property "$SOCKET" 'pause')" == "true" ]] && continue
    }

    [[ "$PRINT_SOCKET" -eq 1 ]] && { RESULT+=("$SOCKET"); continue; }
    [[ "$MEDIA_TITLE" -eq 1 ]] && {
      RESULT+=("$(mpv-get-property "$SOCKET" 'media-title')")
      continue
    }
    REL_SONG_PATH="$(mpv-get-property "$SOCKET" 'path' 2>/dev/null)"
    FULL_SONG_PATH="$(mpv-get-property "$SOCKET" 'working-directory' 2>/dev/null)/$REL_SONG_PATH"
    [[ -f "$FULL_SONG_PATH" ]] && RESULT+=("$FULL_SONG_PATH") || RESULT+=("$REL_SONG_PATH")
  done
}

check_results() {
  [[ "${#RESULT[@]}" -eq 0 ]] && return 1
  [[ "$QUIET" -ne 1 ]] && printf '%s\n' "${RESULT[@]}"
  return 0
}

main() {
  get_opts "$@" || return 1
  get_playing
  check_results || return 1
}

main "$@" && exit 0 || exit 1
